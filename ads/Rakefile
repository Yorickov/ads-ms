# frozen_string_literal: true

ENV['RACK_ENV'] ||= 'development'

migrate = lambda do |version|
  require_relative 'config/db'
  require 'logger'

  Sequel.extension :migration
  DB.loggers << Logger.new($stdout) if DB.loggers.empty?
  filepath = File.expand_path('db/migrate', __dir__)

  Sequel::Migrator.apply(DB, filepath, version)
  Rake::Task['db:dump'].invoke
end

desc 'Update model annotations'
task :annotate do
  require_relative 'config/db'
  require 'sequel/annotate'
  Dir['models/**/*.rb'].sort.each { |f| require_relative f }
  Sequel::Annotate.annotate(Dir['models/**/*.rb'])
end

namespace :db do
  desc 'Run all migrations'
  task :migrate do
    migrate.call(nil)
  end

  desc 'Rollback to previous migration'
  task :rollback do
    require_relative 'config/db'
    current_version = DB['SELECT * FROM schema_info'].first[:version]
    migrate.call(current_version - 1)
  end

  desc 'Full rollback'
  task :rollback_full do
    migrate.call(0)
  end

  desc 'Dump database schema'
  task :dump do
    dev = ENV['RACK_ENV'] == 'development'
    sh %(pg_dump --schema-only --no-privileges --no-owner -s ads_development > db/structure.sql) if dev
  end

  desc 'Create database'
  task :create do
    require 'yaml'
    config = YAML.safe_load(File.read(File.expand_path('config/database.yml', __dir__)), aliases: true)[ENV['RACK_ENV']]
    config['charset'] = 'utf8' unless config['charset']
    puts "Creating database '#{config['database']}'"
    create_db(config)
    puts 'Database created'
  end

  desc 'Drop database'
  task :drop do
    require 'yaml'
    config = YAML.safe_load(File.read(File.expand_path('config/database.yml', __dir__)), aliases: true)[ENV['RACK_ENV']]
    puts "Dropping database '#{config['database']}'"
    drop_db(config)
    puts 'Database droped'
  end
end

class << self
  def create_db(config)
    environment = {
      'PGUSER' => config['user'],
      'PGPASSWORD' => config['password']
    }
    arguments = []
    arguments << "--encoding=#{config['charset']}" if config['charset']
    arguments << "--host=#{config['host']}" if config['host']
    arguments << "--username=#{config['user']}" if config['user']
    arguments << config['database']

    Process.wait Process.spawn(environment, 'createdb', *arguments)
  end

  def drop_db(config)
    environment = {
      'PGUSER' => config['user'],
      'PGPASSWORD' => config['password']
    }
    arguments = []
    arguments << "--host=#{config['host']}" if config[:host]
    arguments << "--username=#{config['user']}" if config[:user]
    arguments << config['database']

    Process.wait Process.spawn(environment, 'dropdb', *arguments)
  end
end
